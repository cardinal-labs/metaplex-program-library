/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';

/**
 * Arguments used to create {@link CCSSettings}
 * @category Accounts
 * @category generated
 */
export type CCSSettingsArgs = {
  candyMachine: web3.PublicKey;
  creator: web3.PublicKey;
  ruleset: web3.PublicKey;
};

export const cCSSettingsDiscriminator = [240, 101, 74, 109, 212, 247, 176, 137];
/**
 * Holds the data for the {@link CCSSettings} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class CCSSettings implements CCSSettingsArgs {
  private constructor(
    readonly candyMachine: web3.PublicKey,
    readonly creator: web3.PublicKey,
    readonly ruleset: web3.PublicKey,
  ) {}

  /**
   * Creates a {@link CCSSettings} instance from the provided args.
   */
  static fromArgs(args: CCSSettingsArgs) {
    return new CCSSettings(args.candyMachine, args.creator, args.ruleset);
  }

  /**
   * Deserializes the {@link CCSSettings} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [CCSSettings, number] {
    return CCSSettings.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link CCSSettings} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<CCSSettings> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find CCSSettings account at ${address}`);
    }
    return CCSSettings.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('ccmpgw68x3NJmNPePFrTm6TsKCEYUVhF8rEAVL9rSDd'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, cCSSettingsBeet);
  }

  /**
   * Deserializes the {@link CCSSettings} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [CCSSettings, number] {
    return cCSSettingsBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link CCSSettings} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return cCSSettingsBeet.serialize({
      accountDiscriminator: cCSSettingsDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link CCSSettings}
   */
  static get byteSize() {
    return cCSSettingsBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link CCSSettings} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(CCSSettings.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link CCSSettings} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === CCSSettings.byteSize;
  }

  /**
   * Returns a readable version of {@link CCSSettings} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      candyMachine: this.candyMachine.toBase58(),
      creator: this.creator.toBase58(),
      ruleset: this.ruleset.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const cCSSettingsBeet = new beet.BeetStruct<
  CCSSettings,
  CCSSettingsArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['candyMachine', beetSolana.publicKey],
    ['creator', beetSolana.publicKey],
    ['ruleset', beetSolana.publicKey],
  ],
  CCSSettings.fromArgs,
  'CCSSettings',
);
