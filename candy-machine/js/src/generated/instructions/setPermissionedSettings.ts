/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';

/**
 * @category Instructions
 * @category SetPermissionedSettings
 * @category generated
 */
export type SetPermissionedSettingsInstructionArgs = {
  creator: web3.PublicKey;
};
/**
 * @category Instructions
 * @category SetPermissionedSettings
 * @category generated
 */
export const setPermissionedSettingsStruct = new beet.BeetArgsStruct<
  SetPermissionedSettingsInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['creator', beetSolana.publicKey],
  ],
  'SetPermissionedSettingsInstructionArgs',
);
/**
 * Accounts required by the _setPermissionedSettings_ instruction
 *
 * @property [_writable_] candyMachine
 * @property [**signer**] authority
 * @property [_writable_] permissionedSettings
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category SetPermissionedSettings
 * @category generated
 */
export type SetPermissionedSettingsInstructionAccounts = {
  candyMachine: web3.PublicKey;
  authority: web3.PublicKey;
  permissionedSettings: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const setPermissionedSettingsInstructionDiscriminator = [
  254, 107, 24, 140, 97, 62, 219, 233,
];

/**
 * Creates a _SetPermissionedSettings_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetPermissionedSettings
 * @category generated
 */
export function createSetPermissionedSettingsInstruction(
  accounts: SetPermissionedSettingsInstructionAccounts,
  args: SetPermissionedSettingsInstructionArgs,
  programId = new web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'),
) {
  const [data] = setPermissionedSettingsStruct.serialize({
    instructionDiscriminator: setPermissionedSettingsInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.permissionedSettings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
